<div class="mx-4 mb-8 mt-6 flex flex-col justify-center items-center gap-12">

    <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-800">Welcome back, <%= user.username %>!</h1>
        <p class="text-lg text-gray-500 mt-2">
            We just need a few more details before you can proceed.
        </p>
    </div>

    <div id="details-feedback" class="hidden w-full max-w-md mt-4 mb-4 p-3 text-center text-red-600 bg-white rounded-lg font-semibold motion-preset-pop"></div>


    <div class="w-full max-w-2xl bg-white shadow-lg rounded-lg p-6 space-y-6 border border-gray-200">
        <form action="" method="post" class="flex flex-col gap-4" id="rehomeForm">

            <div>
                <label for="name" class="block text-gray-700 font-semibold mb-1">Pet's Name</label>
                <input required type="text" name="name" pattern="^[A-Za-z]+$" id="name"
                       class="w-full px-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400">
            </div>

            <div>
                <label for="species" class="block text-gray-700 font-semibold mb-1">Species</label>
                <select name="species" id="species"
                        class="w-full px-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400" required>
                    <option value="default">Select Species</option>
                    <option value="cat">Cat</option>
                    <option value="dog">Dog</option>
                    <option value="pig">Pig</option>
                </select>
            </div>


            <div>
                <label for="breed" class="block text-gray-700 font-semibold mb-1">Breed</label>
                <select name="breed" id="breed" disabled required
                        class="w-full px-4 py-2 border rounded-lg shadow-sm bg-gray-100 text-gray-500 focus:outline-none">
                    <option value="default">Select Breed</option>
                </select>
            </div>


            <div>
                <label for="age" class="block text-gray-700 font-semibold mb-1">Age</label>
                <input type="range" oninput="ageoutput.value=parseInt(age.value)" name="age" id="age" min="1" max="20" value="1"
                       class="w-full accent-yellow-500" required>
                <output id="ageoutput" class="block text-center font-bold text-yellow-500">1</output>
            </div>

            <div>
                <div class="flex gap-2">
                    <label for="male" class="block text-gray-700 font-semibold mb-1">Male</label>
                    <input type="radio" name="sex" value="male">
                    <label for="male" class="block text-gray-700 font-semibold mb-1">Female</label>
                    <input type="radio" name="sex" value="female">
                </div>
                
            </div>


            <div>
                <label for="colours" class="block text-gray-700 font-semibold mb-1">Colours</label>
                <div class="flex flex-wrap gap-2" id="colours">

                </div>
            </div>


            <div>
                <label for="features" class="block text-gray-700 font-semibold mb-1">Features</label>
                <div class="flex flex-wrap gap-2" id="features">

                </div>
            </div>


            <div>
                <label for="size" class="block text-gray-700 font-semibold mb-1">Size</label>
                <select name="size" id="size"
                        class="w-full px-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400 required:">
                    <option value="small">Small</option>
                    <option value="medium">Medium</option>
                    <option value="large">Large</option>
                </select>
            </div>


            <div>
                <label for="reason" class="block text-gray-700 font-semibold mb-1">Reason for Rehoming</label>
                <input type="text" name="reason" id="reason" maxlength="50"
                       class="w-full px-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400"
                       required>
            </div>


            <div>
                <label for="description" class="block text-gray-700 font-semibold mb-1">Description</label>
                <textarea name="description" id="description" minlength="50" maxlength="100"
                          class="w-full px-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400"
                          rows="4" required></textarea>
            </div>

      
            <button class="w-full px-4 py-2 bg-yellow-500 text-white font-bold rounded-lg shadow-md hover:bg-yellow-600 transition-all duration-300">
                Submit Details
            </button>
        </form>
    </div>

  
    <a class="text-blue-500 underline text-center hover:text-blue-600" id="skip-btn" href="/account/dashboard">
        Skip for now
    </a>
</div>


<script>


    

    const rehomeForm = document.getElementById("rehomeForm")
    rehomeForm.addEventListener("submit", (event)=>{
        event.preventDefault()
        postPetForm(event.target)
    })

    
    async function postPetForm(form) {
        const formData = new FormData(form)
        const petDetails = {
            name: formData.get("name"),
            species: formData.get("species"),
            breeds: [formData.get("breed")],
            age: formData.get("age"),
            colours: Array.from(document.querySelectorAll("#colours input:checked")).map(
                (input) => input.value
            ),
            features: Array.from(document.querySelectorAll("#features input:checked")).map(
                (input) => input.value
            ),
            size: formData.get("size"),
            reason: formData.get("reason"),
            description: formData.get("description"),
            sex : formData.get('sex')
        }


        const response = await fetch("/payment/initiate-payment", {
            method : "POST",
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify({product_type : "rehome", product_id : null, price : 50, product_data : petDetails})
        })

        const data = await response.json()

        if (!response.ok){
            displayMessage(data.message)
            rehomeForm.reset()
            return
        }

        window.location.href = data.redirectTo 
    }

    function displayMessage(message){
    const rehome_feedback = document.getElementById("details-feedback")

    rehome_feedback.classList.remove("hidden")
    rehome_feedback.classList.remove("motion-opacity-out-0")
    rehome_feedback.textContent = message

    setTimeout(()=>{
            rehome_feedback.classList.add("motion-opacity-out-0")
        }, 3000)
}
        


    const speciesSelector = document.getElementById("species")
    const breedsSelector = document.getElementById("breed")
    const colourSelector = document.getElementById("colours")
    const featuresSelector = document.getElementById("features")

    speciesSelector.addEventListener("change", async (event)=>{
        const value = event.target.value
        if (value === "default"){
            breedsSelector.innerHTML = "<option>Select Breed</option>"
            breedsSelector.setAttribute("disabled", true)
            colourSelector.innerHTML = ""
            featuresSelector.innerHTML = ""
            return
        }
        await getBreeds(value)
        await getColours(value)
        await getFeatures(value)

    })

    function placeFeatures(features){
        featuresSelector.innerHTML = ""
        features.forEach(feature =>{

            const checkbox_container = document.createElement("div")
            checkbox_container.classList.add("flex", "gap-2")

            const features_label = document.createElement("label")
            features_label.setAttribute("for", `${feature}`)
            features_label.textContent = `${feature}`

            features_checkbox = document.createElement("input")
            features_checkbox.setAttribute("type", "checkbox")
            features_checkbox.setAttribute("id", `${feature}`)
            features_checkbox.setAttribute("value", `${feature}`)

            checkbox_container.appendChild(features_checkbox)
            checkbox_container.appendChild(features_label)
            featuresSelector.appendChild(checkbox_container)
        })
    }

    function placeColours(colours) {
        colourSelector.innerHTML = ""
        colours.forEach(colour =>{

            const checkbox_container = document.createElement("div")
            checkbox_container.classList.add("flex", "gap-2")

            const colour_label = document.createElement("label")
            colour_label.setAttribute("for", `${colour}`)
            colour_label.textContent = `${colour}`

            colour_checkbox = document.createElement("input")
            colour_checkbox.setAttribute("type", "checkbox")
            colour_checkbox.setAttribute("id", `${colour}`)
            colour_checkbox.setAttribute("value", `${colour}`)

            checkbox_container.appendChild(colour_checkbox)
            checkbox_container.appendChild(colour_label)
            colourSelector.appendChild(checkbox_container)
        })
    }



    function placeBreeds(breeds) {
        breedsSelector.innerHTML = ""
        breeds.forEach(breed => {
            const breedOption = document.createElement("option")
            breedOption.textContent = breed
            breedOption.value = breed,
            breedsSelector.appendChild(breedOption)
        });

        breedsSelector.removeAttribute("disabled")
    }

    async function getBreeds(species) {
        
        const response = await fetch("getBreeds", {
            method : "POST",
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify({speciesName : species})
        })

        if (!response.ok){
            console.log("error")
        }

        const data = await response.json()
        const breeds = data.breeds

        if(!breeds){
            console.log("Error")
        }
        placeBreeds(breeds)
    }

    async function getColours(species) {
        
        const response = await fetch("getColours", {
            method : "POST",
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify({speciesName : species})
        })

        if (!response.ok){
            console.log("error")
        }

        const data = await response.json()
        const colours = data.colours

        if(!colours){
            console.log("Error")
        }

        console.log(colours)

        placeColours(colours)
    }

    async function getFeatures(species) {
        
        const response = await fetch("getFeatures", {
            method : "POST",
            headers : {
                "Content-Type" : "application/json"
            },
            body : JSON.stringify({speciesName : species})
        })

        if (!response.ok){
            console.log("error")
        }

        const data = await response.json()
        const features = data.features

        if(!features){
            console.log("Error")
        }

        console.log(features)

        placeFeatures(features)
    }


</script>